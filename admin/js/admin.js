import{app,auth,db,doc,getDoc,updateDoc,collection,onSnapshot,query,orderBy,limit,serverTimestamp,addDoc,runTransaction}from"../../shared/firebase.js";
function show(section){document.querySelectorAll(".section").forEach(s=>s.classList.remove("active"));document.getElementById(section).classList.add("active")}
onSnapshot(query(collection(db,"orders"),orderBy("createdAt","desc"),limit(100)),snap=>{const tb=document.querySelector("#ordersTable tbody");tb.innerHTML="";snap.forEach(d=>{const o=d.data(),b=o.proofUrl?`<a href="${o.proofUrl}" target="_blank">Lihat</a>`:"—";const tr=document.createElement("tr");tr.innerHTML=`<td>${(o.createdAt?.toDate?.()||new Date()).toLocaleString()}</td><td>${o.uid||"-"}</td><td>${o.product||"-"}</td><td>Rp${(o.price||0).toLocaleString("id-ID")}</td><td>${b}</td><td><span class="badge ${o.status==="approved"?"approved":"pending"}">${o.status||"pending"}</span></td><td>${o.status==="pending"?`<button class="btn approve" data-id="${d.id}" data-act="approve">Approve</button> <button class="btn reject" data-id="${d.id}" data-act="reject">Reject</button>`:"—"}</td>`;tb.appendChild(tr)});tb.querySelectorAll("button").forEach(b=>b.addEventListener("click",orderAct))});async function orderAct(e){const id=e.target.dataset.id,act=e.target.dataset.act,ref=doc(db,"orders",id),o=(await getDoc(ref)).data();if(act==="approve"){await runTransaction(db,async tx=>{const aRef=doc(db,"animals",o.animalId),aSnap=await tx.get(aRef);const a=aSnap.exists()?aSnap.data():null;const days=a?.cycleDays||60;const end=new Date;end.setDate(end.getDate()+days);const hRef=doc(collection(db,"holdings"));tx.set(hRef,{uid:o.uid,orderId:id,animalId:o.animalId,product:o.product,startAt:serverTimestamp(),endAt:end,locked:true,status:"active"});tx.update(ref,{status:"approved",approvedAt:serverTimestamp()});if(a&&typeof a.stock==="number"&&a.stock>0)tx.update(aRef,{stock:a.stock-1});});alert("Order di-approve")}else{await updateDoc(ref,{status:"rejected"});alert("Order ditolak")}}onSnapshot(query(collection(db,"withdrawals"),orderBy("createdAt","desc"),limit(100)),snap=>{const tb=document.querySelector("#wdTable tbody");tb.innerHTML="";snap.forEach(d=>{const w=d.data(),net=(w.amount||0)-(w.fee||0);const tr=document.createElement("tr");tr.innerHTML=`<td>${(w.createdAt?.toDate?.()||new Date()).toLocaleString()}</td><td>${w.uid}</td><td>${w.method}</td><td>${w.account||"-"}</td><td>${(w.amount||0).toLocaleString("id-ID")}</td><td>${(w.fee||0).toLocaleString("id-ID")}</td><td>${net.toLocaleString("id-ID")}</td><td><span class="badge ${w.status==="approved"?"approved":"pending"}">${w.status}</span></td><td>${w.status==="pending"?`<button class="btn approve" data-id="${d.id}" data-act="approveWD">Approve</button> <button class="btn reject" data-id="${d.id}" data-act="rejectWD">Reject</button>`:"—"}</td>`;tb.appendChild(tr)});tb.querySelectorAll("button").forEach(b=>b.addEventListener("click",wdAct))});async function wdAct(e){const id=e.target.dataset.id,act=e.target.dataset.act,ref=doc(db,"withdrawals",id);if(act==="approveWD"){await updateDoc(ref,{status:"approved",approvedAt:serverTimestamp()});alert("Withdraw di-approve")}else{await updateDoc(ref,{status:"rejected",rejectedAt:serverTimestamp()});alert("Withdraw ditolak")}}onSnapshot(query(collection(db,"users"),orderBy("createdAt","desc"),limit(200)),snap=>{const tb=document.querySelector("#usersTable tbody");tb.innerHTML="";snap.forEach(d=>{const u=d.data();const tr=document.createElement("tr");tr.innerHTML=`<td>${u.name||"-"}</td><td>${u.email||"-"}</td><td>${d.id}</td><td>${u.role||"user"}</td><td>${u.verified?"✓":"—"}</td><td><button class="btn" data-id="${d.id}" data-act="verify">${u.verified?"Unverify":"Verify"}</button> <button class="btn" data-id="${d.id}" data-act="role">${u.role==="admin"?"Set User":"Set Admin"}</button></td>`;tb.appendChild(tr)});tb.querySelectorAll("button").forEach(b=>b.addEventListener("click",userAct))});async function userAct(e){const id=e.target.dataset.id,act=e.target.dataset.act,ref=doc(db,"users",id),snap=await getDoc(ref),u=snap.data();if(act==="verify"){await updateDoc(ref,{verified:!u.verified})}else{await updateDoc(ref,{role:u.role==="admin"?"user":"admin"})}}